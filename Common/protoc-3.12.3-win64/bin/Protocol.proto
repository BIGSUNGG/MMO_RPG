syntax = "proto3";

package Protocol;
option csharp_namespace = "Google.Protobuf.Protocol";

enum MsgId {
	// Connect
	S_CONNECTED = 0;
	
	// Ping
	S_PING = 1;
	C_PONG = 2;
	
	// Login
	C_LOGIN = 3;
	S_LOGIN = 4;
	
	// Enter
	S_ENTER_MAP = 5;
	S_ENTER_PLAYER = 6;
	
	// Leave
	S_LEAVE_MAP = 7;
	S_LEAVE_PLAYER = 8;

	// Move
	G_MOVE_MAP = 9;
	
	// Spawn
	S_SPAWN_OBJECT = 10;
	S_SPAWN_OBJECTS = 11;
	S_DESPAWN_OBJECT = 12;
	S_DESPAWN_OBJECTS = 13;
	C_REQUEST_OBJECT_INFO = 14;

	// Possess
	S_POSSESS_OBJECT = 15;
	S_UNPOSSESS_OBJECT = 16;

	// Sync
	S_OBJECT_SYNC = 17;
	S_REQUEST_OBJECT_SYNC = 18;
	C_RESPONSE_OBJECT_SYNC = 19;

	// Rpc
	S_RPC_OBJECT_FUNCTION = 20;
	C_RPC_OBJECT_FUNCTION = 21;
	
	S_RPC_COMPONENT_FUNCTION = 22;
	C_RPC_COMPONENT_FUNCTION = 23;

	// DataBase
	S_REQUEST_PLAYER_INFO = 24;
	G_RESPONSE_PLAYER_INFO = 25;

	// Notify
	G_NOTIFY_PLAYER_MONEY = 26;
	S_NOTIFY_PLAYER_MONEY = 27;
	
	G_NOTIFY_PLAYER_ITEM = 28;
	S_NOTIFY_PLAYER_ITEM = 29;
}

// Enums
enum GameObjectType {
	UNKNOWN = 0;
	KNIGHT_PLAYER = 1;
	KNIGHT_MONSTER = 2;
	NPC = 3;
}

enum GameComponentType {
	OBJECT_COMPONENT = 0;
	CHARACTER_MOVEMENT_COMPONENT = 1;
	PLAYER_MOVEMENT_COMPONENT = 2;
	HEALTH_COMPONENT = 3;
	INVENTORY_COMPONENT = 4;
}

enum RpcObjectFunctionId {
    Multicast_SetPosition = 0;

    Multicast_ComboStart = 1;
    Multicast_ComboAttack = 2;
    Multicast_ComboEnd = 3;	
}

enum RpcComponentFunctionId {
    Multicast_DodgeRollStart = 0;

    Client_GiveDamage = 1;	
    Multicast_TakeDamage = 2;
	Multicast_Respawn = 3;

	Server_PurchaseItem = 4;
	Server_UseItem = 5;
}

enum CharacterType {
	Unknown = 0;
	Monster = 1;
	Player = 2;
}

enum ItemType {
	Potion = 0;
}

enum PlayerLoginState {
	NOT_LOGGED_IN = 0;
	LOGGED_IN = 1;
}

enum LoginResult {
	LOGIN_SUCCESS = 0;
	LOGIN_FAIL = 1;
}

// Structs
message PlayerInfo{
	int32 SessionId = 1;
	int32 Hp = 2;
	int32 Money = 3;

	repeated ItemInfo Items = 4;
}

message ObjectInfo {	
	GameObjectType ObjectType= 1;
	int32 ObjectId = 2;
}

message ObjectSyncInfo {
	ObjectInfo ObjectInfo = 1;
	bytes SyncInfo = 2;
}

message ItemInfo {
	ItemType Type = 1;
	int32 Count = 2;
}

// Packets

// S_CONNECTED
message S_Connected {
}

// S_PING
message S_Ping {
}

// C_PONG
message C_Pong {
}

// C_LOGIN
message C_Login {
	int32 AccountId = 1;
	int32 Token = 2;
}

// S_LOGIN  
message S_Login {
	LoginResult loginResult = 1;
}

// S_ENTER_MAP
message S_EnterMap {
	int32 mapId = 1;	
}

// S_ENTER_PLAYER
message S_EnterPlayer{
	int32 SessionId = 1;
	PlayerInfo info = 2;
}

// S_LEAVE_MAP
message S_LeaveMap{
}

// S_LEAVE_PLAYER
message S_LeavePlayer{
	int32 SessionId = 1;
}

// G_MoveMap
message G_MoveMap{
	int32 MoveMapId = 1;
	PlayerInfo Info = 2;
}

// S_SPAWN_OBJECT
message S_SpawnObject{
	ObjectInfo spawnInfo = 1;
}

// S_SPAWN_OBJECTS
message S_SpawnObjects{
	repeated ObjectInfo spawnInfos = 1;
}

// S_DESPAWN_OBJECT
message S_DespawnObject{
	int32 objectId = 1;
}

// S_DESPAWN_OBJECTS
message S_DespawnObjects{
	repeated int32 objectIds = 1;
}

// C_REQUEST_OBJECT_INFO
message C_RequestObjectInfo{
	int32 requestObjectId = 1;
}

// S_POSSESS_OBJECT
message S_PossessObject{
	int32 objectId = 1;
}

// S_UNPOSSESS_OBJECT
message S_UnpossessObject{
}

// S_OBJECT_SYNC
message S_ObjectSync{
	repeated ObjectSyncInfo SyncInfos = 1;	
}

// C_RESPONSE_OBJECT_SYNC
message C_ResponseObjectSync{
	ObjectSyncInfo SyncInfo = 1;
}

// S_REQUEST_OBJECT_SYNC
message S_RequestObjectSync{
}

// S_RPC_OBJECT_FUNCTION
message S_RpcObjectFunction{
	int32 objectId = 1;
	bool AbsolutelyExcute = 2;
	RpcObjectFunctionId rpcFunctionId = 3;
	bytes  parameterBytes = 4;
}

// C_RPC_OBJECT_FUNCTION
message C_RpcObjectFunction{
	int32 objectId = 1;
	RpcObjectFunctionId rpcFunctionId = 2;
	bytes  parameterBytes = 3;
}

// S_RPC_COMPONENT_FUNCTION
message S_RpcComponentFunction{
	int32 objectId = 1;
	bool AbsolutelyExcute = 2;

	GameComponentType componentType = 3;
	RpcComponentFunctionId rpcFunctionId = 4;
	bytes  parameterBytes = 5;
}

// C_RPC_COMPONENT_FUNCTION
message C_RpcComponentFunction{
	int32 objectId = 1;
	GameComponentType componentType = 2;
	RpcComponentFunctionId rpcFunctionId = 3;
	bytes  parameterBytes = 4;
}

// S_REQUEST_PLAYER_INFO
message  S_RequestPlayerInfo{
	int32 SessionId = 1;
	int32 GameAccountId = 2;
}

// G_RESPONSE_PLAYER_INFO
message G_ResponsePlayerInfo{
	int32 GameAccountId = 1;
	PlayerInfo Info = 2;
}

// G_NOTIFY_PLAYER_MONEY
message G_NotifyPlayerMoney{
	int32 SessionId = 1;
	int32 Money = 2;	
}

// S_NOTIFY_PLAYER_MONEY
message S_NotifyPlayerMoney{
	int32 Money = 1;	
}

// G_NOTIFY_PLAYER_ITEM
message G_NotifyPlayerItem{
	int32 SessionId = 1;
	int32 Index = 2;
	ItemInfo info = 3;
}

// S_NOTIFY_PLAYER_ITEM
message S_NotifyPlayerItem{
	int32 Index = 1;
	ItemInfo info = 2;
}